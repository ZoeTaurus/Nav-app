{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useContext, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar RouteContext = createContext(undefined);\nexport var RouteProvider = function RouteProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    routes = _useState2[0],\n    setRoutes = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    routeSessions = _useState4[0],\n    setRouteSessions = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    currentSession = _useState6[0],\n    setCurrentSession = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    selectedRoute = _useState8[0],\n    setSelectedRoute = _useState8[1];\n  var addRoute = function addRoute(routeData) {\n    var newRoute = _objectSpread(_objectSpread({}, routeData), {}, {\n      id: uuidv4(),\n      createdAt: Date.now()\n    });\n    setRoutes(function (prev) {\n      return [].concat(_toConsumableArray(prev), [newRoute]);\n    });\n    return newRoute.id;\n  };\n  var deleteRoute = function deleteRoute(routeId) {\n    setRoutes(function (prev) {\n      return prev.filter(function (route) {\n        return route.id !== routeId;\n      });\n    });\n    setRouteSessions(function (prev) {\n      return prev.filter(function (session) {\n        return session.routeId !== routeId;\n      });\n    });\n    if ((selectedRoute == null ? void 0 : selectedRoute.id) === routeId) {\n      setSelectedRoute(null);\n    }\n    if ((currentSession == null ? void 0 : currentSession.routeId) === routeId) {\n      setCurrentSession(null);\n    }\n  };\n  var selectRoute = function selectRoute(route) {\n    setSelectedRoute(route);\n  };\n  var startSession = function startSession(routeId) {\n    var newSession = {\n      id: uuidv4(),\n      routeId: routeId,\n      startTime: Date.now(),\n      distance: 0,\n      averageSpeed: 0,\n      maxSpeed: 0,\n      points: [],\n      speedBumps: [],\n      trafficData: [],\n      completed: false\n    };\n    setCurrentSession(newSession);\n    setRouteSessions(function (prev) {\n      return [].concat(_toConsumableArray(prev), [newSession]);\n    });\n    return newSession.id;\n  };\n  var endSession = function endSession(sessionId) {\n    setRouteSessions(function (prev) {\n      return prev.map(function (session) {\n        if (session.id === sessionId) {\n          var endTime = Date.now();\n          var duration = endTime - session.startTime;\n          var speeds = session.points.map(function (p) {\n            return p.speed || 0;\n          }).filter(function (s) {\n            return s > 0;\n          });\n          var averageSpeed = speeds.length > 0 ? speeds.reduce(function (a, b) {\n            return a + b;\n          }, 0) / speeds.length : 0;\n          var maxSpeed = speeds.length > 0 ? Math.max.apply(Math, _toConsumableArray(speeds)) : 0;\n          return _objectSpread(_objectSpread({}, session), {}, {\n            endTime: endTime,\n            duration: duration,\n            averageSpeed: averageSpeed,\n            maxSpeed: maxSpeed,\n            completed: true\n          });\n        }\n        return session;\n      });\n    });\n    setCurrentSession(null);\n  };\n  var addPointToSession = function addPointToSession(sessionId, point) {\n    setRouteSessions(function (prev) {\n      return prev.map(function (session) {\n        if (session.id === sessionId) {\n          var newPoints = [].concat(_toConsumableArray(session.points), [point]);\n          var distance = session.distance;\n          if (session.points.length > 0) {\n            var lastPoint = session.points[session.points.length - 1];\n            distance += calculateDistance(lastPoint.latitude, lastPoint.longitude, point.latitude, point.longitude);\n          }\n          return _objectSpread(_objectSpread({}, session), {}, {\n            points: newPoints,\n            distance: distance\n          });\n        }\n        return session;\n      });\n    });\n    if ((currentSession == null ? void 0 : currentSession.id) === sessionId) {\n      setCurrentSession(function (prev) {\n        if (!prev) return null;\n        var newPoints = [].concat(_toConsumableArray(prev.points), [point]);\n        var distance = prev.distance;\n        if (prev.points.length > 0) {\n          var lastPoint = prev.points[prev.points.length - 1];\n          distance += calculateDistance(lastPoint.latitude, lastPoint.longitude, point.latitude, point.longitude);\n        }\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          points: newPoints,\n          distance: distance\n        });\n      });\n    }\n  };\n  var addSpeedBumpToSession = function addSpeedBumpToSession(sessionId, speedBumpData) {\n    var speedBump = _objectSpread(_objectSpread({}, speedBumpData), {}, {\n      userId: 'current-user'\n    });\n    setRouteSessions(function (prev) {\n      return prev.map(function (session) {\n        if (session.id === sessionId) {\n          return _objectSpread(_objectSpread({}, session), {}, {\n            speedBumps: [].concat(_toConsumableArray(session.speedBumps), [speedBump])\n          });\n        }\n        return session;\n      });\n    });\n    if ((currentSession == null ? void 0 : currentSession.id) === sessionId) {\n      setCurrentSession(function (prev) {\n        if (!prev) return null;\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          speedBumps: [].concat(_toConsumableArray(prev.speedBumps), [speedBump])\n        });\n      });\n    }\n  };\n  var addTrafficDataToSession = function addTrafficDataToSession(sessionId, trafficDataInput) {\n    var trafficData = _objectSpread(_objectSpread({}, trafficDataInput), {}, {\n      userId: 'current-user'\n    });\n    setRouteSessions(function (prev) {\n      return prev.map(function (session) {\n        if (session.id === sessionId) {\n          return _objectSpread(_objectSpread({}, session), {}, {\n            trafficData: [].concat(_toConsumableArray(session.trafficData), [trafficData])\n          });\n        }\n        return session;\n      });\n    });\n    if ((currentSession == null ? void 0 : currentSession.id) === sessionId) {\n      setCurrentSession(function (prev) {\n        if (!prev) return null;\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          trafficData: [].concat(_toConsumableArray(prev.trafficData), [trafficData])\n        });\n      });\n    }\n  };\n  var getRouteAnalytics = function getRouteAnalytics(routeId) {\n    var sessions = routeSessions.filter(function (s) {\n      return s.routeId === routeId && s.completed;\n    });\n    if (sessions.length === 0) return null;\n    var durations = sessions.map(function (s) {\n      return s.duration || 0;\n    }).filter(function (d) {\n      return d > 0;\n    });\n    var speeds = sessions.map(function (s) {\n      return s.averageSpeed;\n    }).filter(function (s) {\n      return s > 0;\n    });\n    var distances = sessions.map(function (s) {\n      return s.distance;\n    });\n    var allTrafficData = sessions.flatMap(function (s) {\n      return s.trafficData;\n    });\n    var trafficHotspots = calculateTrafficHotspots(allTrafficData);\n    var timeAnalysis = calculateTimeAnalysis(sessions);\n    return {\n      routeId: routeId,\n      totalSessions: sessions.length,\n      averageDuration: durations.length > 0 ? durations.reduce(function (a, b) {\n        return a + b;\n      }, 0) / durations.length : 0,\n      averageSpeed: speeds.length > 0 ? speeds.reduce(function (a, b) {\n        return a + b;\n      }, 0) / speeds.length : 0,\n      fastestTime: durations.length > 0 ? Math.min.apply(Math, _toConsumableArray(durations)) : 0,\n      slowestTime: durations.length > 0 ? Math.max.apply(Math, _toConsumableArray(durations)) : 0,\n      averageDistance: distances.length > 0 ? distances.reduce(function (a, b) {\n        return a + b;\n      }, 0) / distances.length : 0,\n      speedBumpCount: sessions.reduce(function (total, s) {\n        return total + s.speedBumps.length;\n      }, 0),\n      trafficHotspots: trafficHotspots,\n      bestTimeOfDay: timeAnalysis.bestTime,\n      worstTimeOfDay: timeAnalysis.worstTime\n    };\n  };\n  var getRouteSessions = function getRouteSessions(routeId) {\n    return routeSessions.filter(function (s) {\n      return s.routeId === routeId;\n    });\n  };\n  var value = {\n    routes: routes,\n    routeSessions: routeSessions,\n    currentSession: currentSession,\n    selectedRoute: selectedRoute,\n    addRoute: addRoute,\n    deleteRoute: deleteRoute,\n    selectRoute: selectRoute,\n    startSession: startSession,\n    endSession: endSession,\n    addPointToSession: addPointToSession,\n    addSpeedBumpToSession: addSpeedBumpToSession,\n    addTrafficDataToSession: addTrafficDataToSession,\n    getRouteAnalytics: getRouteAnalytics,\n    getRouteSessions: getRouteSessions\n  };\n  return _jsx(RouteContext.Provider, {\n    value: value,\n    children: children\n  });\n};\nexport var useRoute = function useRoute() {\n  var context = useContext(RouteContext);\n  if (context === undefined) {\n    throw new Error('useRoute must be used within a RouteProvider');\n  }\n  return context;\n};\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  var R = 6371e3;\n  var φ1 = lat1 * Math.PI / 180;\n  var φ2 = lat2 * Math.PI / 180;\n  var Δφ = (lat2 - lat1) * Math.PI / 180;\n  var Δλ = (lon2 - lon1) * Math.PI / 180;\n  var a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\nfunction calculateTrafficHotspots(trafficData) {\n  var hotspots = new Map();\n  trafficData.forEach(function (data) {\n    var key = `${data.latitude.toFixed(4)},${data.longitude.toFixed(4)}`;\n    if (hotspots.has(key)) {\n      var existing = hotspots.get(key);\n      hotspots.set(key, _objectSpread(_objectSpread({}, existing), {}, {\n        count: existing.count + 1\n      }));\n    } else {\n      hotspots.set(key, {\n        latitude: data.latitude,\n        longitude: data.longitude,\n        count: 1\n      });\n    }\n  });\n  return Array.from(hotspots.values()).map(function (h) {\n    return _objectSpread(_objectSpread({}, h), {}, {\n      frequency: h.count\n    });\n  }).sort(function (a, b) {\n    return b.frequency - a.frequency;\n  }).slice(0, 10);\n}\nfunction calculateTimeAnalysis(sessions) {\n  var hourlyPerformance = new Map();\n  sessions.forEach(function (session) {\n    if (session.duration) {\n      var hour = new Date(session.startTime).getHours();\n      if (hourlyPerformance.has(hour)) {\n        var existing = hourlyPerformance.get(hour);\n        hourlyPerformance.set(hour, {\n          totalTime: existing.totalTime + session.duration,\n          count: existing.count + 1\n        });\n      } else {\n        hourlyPerformance.set(hour, {\n          totalTime: session.duration,\n          count: 1\n        });\n      }\n    }\n  });\n  var bestTime = 'N/A';\n  var worstTime = 'N/A';\n  var bestAverage = Infinity;\n  var worstAverage = 0;\n  hourlyPerformance.forEach(function (data, hour) {\n    var average = data.totalTime / data.count;\n    if (average < bestAverage) {\n      bestAverage = average;\n      bestTime = `${hour}:00`;\n    }\n    if (average > worstAverage) {\n      worstAverage = average;\n      worstTime = `${hour}:00`;\n    }\n  });\n  return {\n    bestTime: bestTime,\n    worstTime: worstTime\n  };\n}","map":{"version":3,"names":["React","createContext","useContext","useState","v4","uuidv4","jsx","_jsx","RouteContext","undefined","RouteProvider","_ref","children","_useState","_useState2","_slicedToArray","routes","setRoutes","_useState3","_useState4","routeSessions","setRouteSessions","_useState5","_useState6","currentSession","setCurrentSession","_useState7","_useState8","selectedRoute","setSelectedRoute","addRoute","routeData","newRoute","_objectSpread","id","createdAt","Date","now","prev","concat","_toConsumableArray","deleteRoute","routeId","filter","route","session","selectRoute","startSession","newSession","startTime","distance","averageSpeed","maxSpeed","points","speedBumps","trafficData","completed","endSession","sessionId","map","endTime","duration","speeds","p","speed","s","length","reduce","a","b","Math","max","apply","addPointToSession","point","newPoints","lastPoint","calculateDistance","latitude","longitude","addSpeedBumpToSession","speedBumpData","speedBump","userId","addTrafficDataToSession","trafficDataInput","getRouteAnalytics","sessions","durations","d","distances","allTrafficData","flatMap","trafficHotspots","calculateTrafficHotspots","timeAnalysis","calculateTimeAnalysis","totalSessions","averageDuration","fastestTime","min","slowestTime","averageDistance","speedBumpCount","total","bestTimeOfDay","bestTime","worstTimeOfDay","worstTime","getRouteSessions","value","Provider","useRoute","context","Error","lat1","lon1","lat2","lon2","R","φ1","PI","φ2","Δφ","Δλ","sin","cos","c","atan2","sqrt","hotspots","Map","forEach","data","key","toFixed","has","existing","get","set","count","Array","from","values","h","frequency","sort","slice","hourlyPerformance","hour","getHours","totalTime","bestAverage","Infinity","worstAverage","average"],"sources":["/Users/xinzan/Road time mesurment tool/src/context/RouteContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface RoutePoint {\n  latitude: number;\n  longitude: number;\n  timestamp: number;\n  speed?: number;\n  accuracy?: number;\n}\n\nexport interface SpeedBumpData {\n  latitude: number;\n  longitude: number;\n  intensity: number; // 1-10 scale\n  timestamp: number;\n  userId: string;\n}\n\nexport interface TrafficData {\n  latitude: number;\n  longitude: number;\n  speed: number;\n  timestamp: number;\n  userId: string;\n  timeOfDay: string;\n  dayOfWeek: string;\n}\n\nexport interface Route {\n  id: string;\n  name: string;\n  startPoint: { latitude: number; longitude: number; address: string };\n  endPoint: { latitude: number; longitude: number; address: string };\n  waypoints?: { latitude: number; longitude: number }[];\n  createdAt: number;\n}\n\nexport interface RouteSession {\n  id: string;\n  routeId: string;\n  startTime: number;\n  endTime?: number;\n  duration?: number;\n  distance: number;\n  averageSpeed: number;\n  maxSpeed: number;\n  points: RoutePoint[];\n  speedBumps: SpeedBumpData[];\n  trafficData: TrafficData[];\n  completed: boolean;\n}\n\nexport interface RouteAnalytics {\n  routeId: string;\n  totalSessions: number;\n  averageDuration: number;\n  averageSpeed: number;\n  fastestTime: number;\n  slowestTime: number;\n  averageDistance: number;\n  speedBumpCount: number;\n  trafficHotspots: { latitude: number; longitude: number; frequency: number }[];\n  bestTimeOfDay: string;\n  worstTimeOfDay: string;\n}\n\ninterface RouteContextType {\n  routes: Route[];\n  routeSessions: RouteSession[];\n  currentSession: RouteSession | null;\n  selectedRoute: Route | null;\n  \n  // Route management\n  addRoute: (route: Omit<Route, 'id' | 'createdAt'>) => string;\n  deleteRoute: (routeId: string) => void;\n  selectRoute: (route: Route) => void;\n  \n  // Session management\n  startSession: (routeId: string) => string;\n  endSession: (sessionId: string) => void;\n  addPointToSession: (sessionId: string, point: RoutePoint) => void;\n  addSpeedBumpToSession: (sessionId: string, speedBump: Omit<SpeedBumpData, 'userId'>) => void;\n  addTrafficDataToSession: (sessionId: string, trafficData: Omit<TrafficData, 'userId'>) => void;\n  \n  // Analytics\n  getRouteAnalytics: (routeId: string) => RouteAnalytics | null;\n  getRouteSessions: (routeId: string) => RouteSession[];\n}\n\nconst RouteContext = createContext<RouteContextType | undefined>(undefined);\n\ninterface RouteProviderProps {\n  children: ReactNode;\n}\n\nexport const RouteProvider: React.FC<RouteProviderProps> = ({ children }) => {\n  const [routes, setRoutes] = useState<Route[]>([]);\n  const [routeSessions, setRouteSessions] = useState<RouteSession[]>([]);\n  const [currentSession, setCurrentSession] = useState<RouteSession | null>(null);\n  const [selectedRoute, setSelectedRoute] = useState<Route | null>(null);\n\n  const addRoute = (routeData: Omit<Route, 'id' | 'createdAt'>): string => {\n    const newRoute: Route = {\n      ...routeData,\n      id: uuidv4(),\n      createdAt: Date.now(),\n    };\n    \n    setRoutes(prev => [...prev, newRoute]);\n    return newRoute.id;\n  };\n\n  const deleteRoute = (routeId: string) => {\n    setRoutes(prev => prev.filter(route => route.id !== routeId));\n    setRouteSessions(prev => prev.filter(session => session.routeId !== routeId));\n    \n    if (selectedRoute?.id === routeId) {\n      setSelectedRoute(null);\n    }\n    \n    if (currentSession?.routeId === routeId) {\n      setCurrentSession(null);\n    }\n  };\n\n  const selectRoute = (route: Route) => {\n    setSelectedRoute(route);\n  };\n\n  const startSession = (routeId: string): string => {\n    const newSession: RouteSession = {\n      id: uuidv4(),\n      routeId,\n      startTime: Date.now(),\n      distance: 0,\n      averageSpeed: 0,\n      maxSpeed: 0,\n      points: [],\n      speedBumps: [],\n      trafficData: [],\n      completed: false,\n    };\n    \n    setCurrentSession(newSession);\n    setRouteSessions(prev => [...prev, newSession]);\n    return newSession.id;\n  };\n\n  const endSession = (sessionId: string) => {\n    setRouteSessions(prev => prev.map(session => {\n      if (session.id === sessionId) {\n        const endTime = Date.now();\n        const duration = endTime - session.startTime;\n        \n        // Calculate final metrics\n        const speeds = session.points.map(p => p.speed || 0).filter(s => s > 0);\n        const averageSpeed = speeds.length > 0 ? speeds.reduce((a, b) => a + b, 0) / speeds.length : 0;\n        const maxSpeed = speeds.length > 0 ? Math.max(...speeds) : 0;\n        \n        return {\n          ...session,\n          endTime,\n          duration,\n          averageSpeed,\n          maxSpeed,\n          completed: true,\n        };\n      }\n      return session;\n    }));\n    \n    setCurrentSession(null);\n  };\n\n  const addPointToSession = (sessionId: string, point: RoutePoint) => {\n    setRouteSessions(prev => prev.map(session => {\n      if (session.id === sessionId) {\n        const newPoints = [...session.points, point];\n        \n        // Calculate distance using Haversine formula\n        let distance = session.distance;\n        if (session.points.length > 0) {\n          const lastPoint = session.points[session.points.length - 1];\n          distance += calculateDistance(\n            lastPoint.latitude,\n            lastPoint.longitude,\n            point.latitude,\n            point.longitude\n          );\n        }\n        \n        return {\n          ...session,\n          points: newPoints,\n          distance,\n        };\n      }\n      return session;\n    }));\n    \n    if (currentSession?.id === sessionId) {\n      setCurrentSession(prev => {\n        if (!prev) return null;\n        \n        const newPoints = [...prev.points, point];\n        let distance = prev.distance;\n        \n        if (prev.points.length > 0) {\n          const lastPoint = prev.points[prev.points.length - 1];\n          distance += calculateDistance(\n            lastPoint.latitude,\n            lastPoint.longitude,\n            point.latitude,\n            point.longitude\n          );\n        }\n        \n        return {\n          ...prev,\n          points: newPoints,\n          distance,\n        };\n      });\n    }\n  };\n\n  const addSpeedBumpToSession = (sessionId: string, speedBumpData: Omit<SpeedBumpData, 'userId'>) => {\n    const speedBump: SpeedBumpData = {\n      ...speedBumpData,\n      userId: 'current-user', // In a real app, this would be the actual user ID\n    };\n    \n    setRouteSessions(prev => prev.map(session => {\n      if (session.id === sessionId) {\n        return {\n          ...session,\n          speedBumps: [...session.speedBumps, speedBump],\n        };\n      }\n      return session;\n    }));\n    \n    if (currentSession?.id === sessionId) {\n      setCurrentSession(prev => {\n        if (!prev) return null;\n        return {\n          ...prev,\n          speedBumps: [...prev.speedBumps, speedBump],\n        };\n      });\n    }\n  };\n\n  const addTrafficDataToSession = (sessionId: string, trafficDataInput: Omit<TrafficData, 'userId'>) => {\n    const trafficData: TrafficData = {\n      ...trafficDataInput,\n      userId: 'current-user', // In a real app, this would be the actual user ID\n    };\n    \n    setRouteSessions(prev => prev.map(session => {\n      if (session.id === sessionId) {\n        return {\n          ...session,\n          trafficData: [...session.trafficData, trafficData],\n        };\n      }\n      return session;\n    }));\n    \n    if (currentSession?.id === sessionId) {\n      setCurrentSession(prev => {\n        if (!prev) return null;\n        return {\n          ...prev,\n          trafficData: [...prev.trafficData, trafficData],\n        };\n      });\n    }\n  };\n\n  const getRouteAnalytics = (routeId: string): RouteAnalytics | null => {\n    const sessions = routeSessions.filter(s => s.routeId === routeId && s.completed);\n    \n    if (sessions.length === 0) return null;\n    \n    const durations = sessions.map(s => s.duration || 0).filter(d => d > 0);\n    const speeds = sessions.map(s => s.averageSpeed).filter(s => s > 0);\n    const distances = sessions.map(s => s.distance);\n    \n    // Calculate traffic hotspots\n    const allTrafficData = sessions.flatMap(s => s.trafficData);\n    const trafficHotspots = calculateTrafficHotspots(allTrafficData);\n    \n    // Calculate best/worst times of day\n    const timeAnalysis = calculateTimeAnalysis(sessions);\n    \n    return {\n      routeId,\n      totalSessions: sessions.length,\n      averageDuration: durations.length > 0 ? durations.reduce((a, b) => a + b, 0) / durations.length : 0,\n      averageSpeed: speeds.length > 0 ? speeds.reduce((a, b) => a + b, 0) / speeds.length : 0,\n      fastestTime: durations.length > 0 ? Math.min(...durations) : 0,\n      slowestTime: durations.length > 0 ? Math.max(...durations) : 0,\n      averageDistance: distances.length > 0 ? distances.reduce((a, b) => a + b, 0) / distances.length : 0,\n      speedBumpCount: sessions.reduce((total, s) => total + s.speedBumps.length, 0),\n      trafficHotspots,\n      bestTimeOfDay: timeAnalysis.bestTime,\n      worstTimeOfDay: timeAnalysis.worstTime,\n    };\n  };\n\n  const getRouteSessions = (routeId: string): RouteSession[] => {\n    return routeSessions.filter(s => s.routeId === routeId);\n  };\n\n  const value: RouteContextType = {\n    routes,\n    routeSessions,\n    currentSession,\n    selectedRoute,\n    addRoute,\n    deleteRoute,\n    selectRoute,\n    startSession,\n    endSession,\n    addPointToSession,\n    addSpeedBumpToSession,\n    addTrafficDataToSession,\n    getRouteAnalytics,\n    getRouteSessions,\n  };\n\n  return (\n    <RouteContext.Provider value={value}>\n      {children}\n    </RouteContext.Provider>\n  );\n};\n\nexport const useRoute = (): RouteContextType => {\n  const context = useContext(RouteContext);\n  if (context === undefined) {\n    throw new Error('useRoute must be used within a RouteProvider');\n  }\n  return context;\n};\n\n// Utility functions\nfunction calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 6371e3; // Earth's radius in meters\n  const φ1 = lat1 * Math.PI / 180;\n  const φ2 = lat2 * Math.PI / 180;\n  const Δφ = (lat2 - lat1) * Math.PI / 180;\n  const Δλ = (lon2 - lon1) * Math.PI / 180;\n\n  const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n    Math.cos(φ1) * Math.cos(φ2) *\n    Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n  return R * c;\n}\n\nfunction calculateTrafficHotspots(trafficData: TrafficData[]): { latitude: number; longitude: number; frequency: number }[] {\n  const hotspots = new Map<string, { latitude: number; longitude: number; count: number }>();\n  \n  trafficData.forEach(data => {\n    // Group by approximate location (round to 4 decimal places ~ 11m precision)\n    const key = `${data.latitude.toFixed(4)},${data.longitude.toFixed(4)}`;\n    \n    if (hotspots.has(key)) {\n      const existing = hotspots.get(key)!;\n      hotspots.set(key, { ...existing, count: existing.count + 1 });\n    } else {\n      hotspots.set(key, {\n        latitude: data.latitude,\n        longitude: data.longitude,\n        count: 1,\n      });\n    }\n  });\n  \n  return Array.from(hotspots.values())\n    .map(h => ({ ...h, frequency: h.count }))\n    .sort((a, b) => b.frequency - a.frequency)\n    .slice(0, 10); // Top 10 hotspots\n}\n\nfunction calculateTimeAnalysis(sessions: RouteSession[]): { bestTime: string; worstTime: string } {\n  const hourlyPerformance = new Map<number, { totalTime: number; count: number }>();\n  \n  sessions.forEach(session => {\n    if (session.duration) {\n      const hour = new Date(session.startTime).getHours();\n      \n      if (hourlyPerformance.has(hour)) {\n        const existing = hourlyPerformance.get(hour)!;\n        hourlyPerformance.set(hour, {\n          totalTime: existing.totalTime + session.duration,\n          count: existing.count + 1,\n        });\n      } else {\n        hourlyPerformance.set(hour, {\n          totalTime: session.duration,\n          count: 1,\n        });\n      }\n    }\n  });\n  \n  let bestTime = 'N/A';\n  let worstTime = 'N/A';\n  let bestAverage = Infinity;\n  let worstAverage = 0;\n  \n  hourlyPerformance.forEach((data, hour) => {\n    const average = data.totalTime / data.count;\n    \n    if (average < bestAverage) {\n      bestAverage = average;\n      bestTime = `${hour}:00`;\n    }\n    \n    if (average > worstAverage) {\n      worstAverage = average;\n      worstTime = `${hour}:00`;\n    }\n  });\n  \n  return { bestTime, worstTime };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}