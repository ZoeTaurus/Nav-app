{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _superPropGet(t, o, e, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(e, t); } : p; }\nimport DeviceSensor from \"./DeviceSensor\";\nimport ExponentMagnetometer from \"./ExponentMagnetometer\";\nexport var MagnetometerSensor = function (_DeviceSensor) {\n  function MagnetometerSensor() {\n    _classCallCheck(this, MagnetometerSensor);\n    return _callSuper(this, MagnetometerSensor, arguments);\n  }\n  _inherits(MagnetometerSensor, _DeviceSensor);\n  return _createClass(MagnetometerSensor, [{\n    key: \"isAvailableAsync\",\n    value: (function () {\n      var _isAvailableAsync = _asyncToGenerator(function* () {\n        return _superPropGet(MagnetometerSensor, \"isAvailableAsync\", this, 3)([]);\n      });\n      function isAvailableAsync() {\n        return _isAvailableAsync.apply(this, arguments);\n      }\n      return isAvailableAsync;\n    }())\n  }, {\n    key: \"addListener\",\n    value: function addListener(listener) {\n      return _superPropGet(MagnetometerSensor, \"addListener\", this, 3)([listener]);\n    }\n  }]);\n}(DeviceSensor);\nexport default new MagnetometerSensor(ExponentMagnetometer, 'magnetometerDidUpdate');","map":{"version":3,"names":["DeviceSensor","ExponentMagnetometer","MagnetometerSensor","_DeviceSensor","_classCallCheck","_callSuper","arguments","_inherits","_createClass","key","value","_isAvailableAsync","_asyncToGenerator","_superPropGet","isAvailableAsync","apply","addListener","listener"],"sources":["/Users/xinzan/Road time mesurment tool/node_modules/expo-sensors/src/Magnetometer.ts"],"sourcesContent":["import DeviceSensor from './DeviceSensor';\nimport type { Listener, Subscription } from './DeviceSensor';\nimport ExponentMagnetometer from './ExponentMagnetometer';\n\n/**\n * Each of these keys represents the strength of magnetic field along that particular axis measured in microteslas (`Î¼T`).\n */\nexport type MagnetometerMeasurement = {\n  /**\n   * Value representing strength of magnetic field recorded in X axis.\n   */\n  x: number;\n  /**\n   * Value representing strength of magnetic field recorded in Y axis.\n   */\n  y: number;\n  /**\n   * Value representing strength of magnetic field recorded in Z axis.\n   */\n  z: number;\n};\n\n/**\n * @platform android\n * @platform ios\n */\nexport class MagnetometerSensor extends DeviceSensor<MagnetometerMeasurement> {\n  /**\n   * > **info** You should always check the sensor availability before attempting to use it.\n   *\n   * Check the availability of the device magnetometer. Requires at least Android 2.3 (API Level 9) and iOS 8.\n   * @return A promise that resolves to a `boolean` denoting the availability of the sensor.\n   */\n  async isAvailableAsync(): Promise<boolean> {\n    return super.isAvailableAsync();\n  }\n\n  /**\n   * Subscribe for updates to the magnetometer.\n   * @param listener A callback that is invoked when a barometer update is available. When invoked, the listener is provided with a single argument that is `MagnetometerMeasurement`.\n   * @return A subscription that you can call `remove()` on when you would like to unsubscribe the listener.\n   */\n  addListener(listener: Listener<MagnetometerMeasurement>): Subscription {\n    return super.addListener(listener);\n  }\n}\n\nexport default new MagnetometerSensor(ExponentMagnetometer, 'magnetometerDidUpdate');\n"],"mappings":";;;;;;;;;;AAAA,OAAOA,YAAY;AAEnB,OAAOC,oBAAoB;AAwB3B,WAAaC,kBAAmB,aAAAC,aAAA;EAAA,SAAAD,mBAAA;IAAAE,eAAA,OAAAF,kBAAA;IAAA,OAAAG,UAAA,OAAAH,kBAAA,EAAAI,SAAA;EAAA;EAAAC,SAAA,CAAAL,kBAAA,EAAAC,aAAA;EAAA,OAAAK,YAAA,CAAAN,kBAAA;IAAAO,GAAA;IAAAC,KAAA;MAAA,IAAAC,iBAAA,GAAAC,iBAAA,CAO9B,aAAsB;QACpB,OAAAC,aAAA,CAAAX,kBAAA;MACF,CAAC;MAAA,SAFKY,gBAAgBA,CAAA;QAAA,OAAAH,iBAAA,CAAAI,KAAA,OAAAT,SAAA;MAAA;MAAA,OAAhBQ,gBAAgB;IAAA;EAAA;IAAAL,GAAA;IAAAC,KAAA,EAStB,SAAAM,WAAWA,CAACC,QAA2C;MACrD,OAAAJ,aAAA,CAAAX,kBAAA,2BAAyBe,QAAQ;IACnC;EAAC;AAAA,EAlBqCjB,YAAqC;AAqB7E,eAAe,IAAIE,kBAAkB,CAACD,oBAAoB,EAAE,uBAAuB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}