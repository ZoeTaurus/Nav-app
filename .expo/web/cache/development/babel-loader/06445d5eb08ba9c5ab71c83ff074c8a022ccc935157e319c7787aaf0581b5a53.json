{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _superPropGet(t, o, e, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(e, t); } : p; }\nimport DeviceSensor from \"./DeviceSensor\";\nimport ExponentGyroscope from \"./ExponentGyroscope\";\nexport var GyroscopeSensor = function (_DeviceSensor) {\n  function GyroscopeSensor() {\n    _classCallCheck(this, GyroscopeSensor);\n    return _callSuper(this, GyroscopeSensor, arguments);\n  }\n  _inherits(GyroscopeSensor, _DeviceSensor);\n  return _createClass(GyroscopeSensor, [{\n    key: \"isAvailableAsync\",\n    value: (function () {\n      var _isAvailableAsync = _asyncToGenerator(function* () {\n        return _superPropGet(GyroscopeSensor, \"isAvailableAsync\", this, 3)([]);\n      });\n      function isAvailableAsync() {\n        return _isAvailableAsync.apply(this, arguments);\n      }\n      return isAvailableAsync;\n    }())\n  }, {\n    key: \"addListener\",\n    value: function addListener(listener) {\n      return _superPropGet(GyroscopeSensor, \"addListener\", this, 3)([listener]);\n    }\n  }]);\n}(DeviceSensor);\nexport default new GyroscopeSensor(ExponentGyroscope, 'gyroscopeDidUpdate');","map":{"version":3,"names":["DeviceSensor","ExponentGyroscope","GyroscopeSensor","_DeviceSensor","_classCallCheck","_callSuper","arguments","_inherits","_createClass","key","value","_isAvailableAsync","_asyncToGenerator","_superPropGet","isAvailableAsync","apply","addListener","listener"],"sources":["/Users/xinzan/Road time mesurment tool/node_modules/expo-sensors/src/Gyroscope.ts"],"sourcesContent":["import DeviceSensor from './DeviceSensor';\nimport type { Listener, Subscription } from './DeviceSensor';\nimport ExponentGyroscope from './ExponentGyroscope';\n\n/**\n * Each of these keys represents the rotation along that particular axis measured in degrees per second (Â°/s).\n */\nexport type GyroscopeMeasurement = {\n  /**\n   * Value of rotation in degrees per second device reported in X axis.\n   */\n  x: number;\n  /**\n   * Value of rotation in degrees per second device reported in Y axis.\n   */\n  y: number;\n  /**\n   * Value of rotation in degrees per second device reported in Z axis.\n   */\n  z: number;\n};\n\nexport class GyroscopeSensor extends DeviceSensor<GyroscopeMeasurement> {\n  /**\n   * > **info** You should always check the sensor availability before attempting to use it.\n   *\n   * Returns whether the gyroscope is enabled on the device.\n   *\n   * On mobile web, you must first invoke `Gyroscope.requestPermissionsAsync()` in a user interaction (i.e. touch event) before you can use this module.\n   * If the `status` is not equal to `granted` then you should inform the end user that they may have to open settings.\n   *\n   * On **web** this starts a timer and waits to see if an event is fired. This should predict if the iOS device has the **device orientation** API disabled in\n   * **Settings > Safari > Motion & Orientation Access**. Some devices will also not fire if the site isn't hosted with **HTTPS** as `DeviceMotion` is now considered a secure API.\n   * There is no formal API for detecting the status of `DeviceMotion` so this API can sometimes be unreliable on web.\n   *\n   * @return A promise that resolves to a `boolean` denoting the availability of the gyroscope.\n   */\n  async isAvailableAsync(): Promise<boolean> {\n    return super.isAvailableAsync();\n  }\n\n  /**\n   * Subscribe for updates to the accelerometer.\n   *\n   * @param listener A callback that is invoked when an accelerometer update is available. When invoked,\n   * the listener is provided a single argument that is an `GyroscopeMeasurement` object.\n   *\n   * @return A subscription that you can call `remove()` on when you would like to unsubscribe the listener.\n   */\n  addListener(listener: Listener<GyroscopeMeasurement>): Subscription {\n    return super.addListener(listener);\n  }\n}\n\nexport default new GyroscopeSensor(ExponentGyroscope, 'gyroscopeDidUpdate');\n"],"mappings":";;;;;;;;;;AAAA,OAAOA,YAAY;AAEnB,OAAOC,iBAAiB;AAoBxB,WAAaC,eAAgB,aAAAC,aAAA;EAAA,SAAAD,gBAAA;IAAAE,eAAA,OAAAF,eAAA;IAAA,OAAAG,UAAA,OAAAH,eAAA,EAAAI,SAAA;EAAA;EAAAC,SAAA,CAAAL,eAAA,EAAAC,aAAA;EAAA,OAAAK,YAAA,CAAAN,eAAA;IAAAO,GAAA;IAAAC,KAAA;MAAA,IAAAC,iBAAA,GAAAC,iBAAA,CAe3B,aAAsB;QACpB,OAAAC,aAAA,CAAAX,eAAA;MACF,CAAC;MAAA,SAFKY,gBAAgBA,CAAA;QAAA,OAAAH,iBAAA,CAAAI,KAAA,OAAAT,SAAA;MAAA;MAAA,OAAhBQ,gBAAgB;IAAA;EAAA;IAAAL,GAAA;IAAAC,KAAA,EAYtB,SAAAM,WAAWA,CAACC,QAAwC;MAClD,OAAAJ,aAAA,CAAAX,eAAA,2BAAyBe,QAAQ;IACnC;EAAC;AAAA,EA7BkCjB,YAAkC;AAgCvE,eAAe,IAAIE,eAAe,CAACD,iBAAiB,EAAE,oBAAoB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}